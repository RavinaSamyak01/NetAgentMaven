<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="23" passed="22" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-05-05T11:13:16 IST" name="NetAgentSmokeTest" finished-at="2022-05-05T11:27:21 IST" duration-ms="844274">
    <groups>
    </groups>
    <test started-at="2022-05-05T11:13:16 IST" name="CCAttempt " finished-at="2022-05-05T11:13:19 IST" duration-ms="2423">
      <class name="netAgent_OperationsTab.CCAttempt">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_OperationsTab.CCAttempt@47d9a273]" started-at="2022-05-05T11:13:16 IST" name="testMethodName" finished-at="2022-05-05T11:13:16 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_OperationsTab.CCAttempt.ccAttempt() throws java.io.IOException,org.apache.poi.EncryptedDocumentException,org.apache.poi.openxml4j.exceptions.InvalidFormatException,java.lang.InterruptedException,java.awt.AWTException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="ccAttempt()[pri:0, instance:netAgent_OperationsTab.CCAttempt@47d9a273]" started-at="2022-05-05T11:13:16 IST" name="ccAttempt" finished-at="2022-05-05T11:13:19 IST" duration-ms="2203" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id="UpComingGD"]//table/tbody/tr[2]//a"}
  (Session info: chrome=100.0.4896.127)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'SIPL92', ip: '10.212.130.161', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '16.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 100.0.4896.127, chrome: {chromedriverVersion: 100.0.4896.60 (6a5d10861ce8..., userDataDir: C:\Users\RPRAJA~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:61779}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: e845b8d91293be84fcf16cdc48101347
*** Element info: {Using=xpath, value=//*[@id="UpComingGD"]//table/tbody/tr[2]//a}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id="UpComingGD"]//table/tbody/tr[2]//a"}
  (Session info: chrome=100.0.4896.127)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'SIPL92', ip: '10.212.130.161', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '16.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 100.0.4896.127, chrome: {chromedriverVersion: 100.0.4896.60 (6a5d10861ce8..., userDataDir: C:\Users\RPRAJA~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:61779}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: e845b8d91293be84fcf16cdc48101347
*** Element info: {Using=xpath, value=//*[@id="UpComingGD"]//table/tbody/tr[2]//a}
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)
at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at netAgent_OperationsTab.CCAttempt.cycleCount(CCAttempt.java:1874)
at netAgent_OperationsTab.CCAttempt.ccAttempt(CCAttempt.java:42)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ccAttempt -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_OperationsTab.CCAttempt@47d9a273]" started-at="2022-05-05T11:13:19 IST" name="getResult" finished-at="2022-05-05T11:13:19 IST" duration-ms="167" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ccAttempt status=FAILURE method=CCAttempt.ccAttempt()[pri:0, instance:netAgent_OperationsTab.CCAttempt@47d9a273] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_OperationsTab.CCAttempt -->
    </test> <!-- CCAttempt  -->
    <test started-at="2022-05-05T11:13:19 IST" name="Parts" finished-at="2022-05-05T11:13:56 IST" duration-ms="37591">
      <class name="netAgent_Inventory.Parts">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Inventory.Parts@4b45a2f5]" started-at="2022-05-05T11:13:19 IST" name="testMethodName" finished-at="2022-05-05T11:13:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void netAgent_Inventory.Parts.parts() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="parts()[pri:0, instance:netAgent_Inventory.Parts@4b45a2f5]" started-at="2022-05-05T11:13:19 IST" name="parts" finished-at="2022-05-05T11:13:56 IST" duration-ms="37478" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- parts -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Inventory.Parts@4b45a2f5]" started-at="2022-05-05T11:13:56 IST" name="getResult" finished-at="2022-05-05T11:13:56 IST" duration-ms="108" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=parts status=SUCCESS method=Parts.parts()[pri:0, instance:netAgent_Inventory.Parts@4b45a2f5] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Inventory.Parts -->
    </test> <!-- Parts -->
    <test started-at="2022-05-05T11:13:56 IST" name="FSL Storage" finished-at="2022-05-05T11:14:02 IST" duration-ms="5180">
      <class name="netAgent_Inventory.FSLStorage">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Inventory.FSLStorage@13e344d]" started-at="2022-05-05T11:13:56 IST" name="testMethodName" finished-at="2022-05-05T11:13:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Inventory.FSLStorage.fSLStorage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="fSLStorage()[pri:0, instance:netAgent_Inventory.FSLStorage@13e344d]" started-at="2022-05-05T11:13:56 IST" name="fSLStorage" finished-at="2022-05-05T11:14:01 IST" duration-ms="5055" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fSLStorage -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Inventory.FSLStorage@13e344d]" started-at="2022-05-05T11:14:01 IST" name="getResult" finished-at="2022-05-05T11:14:02 IST" duration-ms="122" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=fSLStorage status=SUCCESS method=FSLStorage.fSLStorage()[pri:0, instance:netAgent_Inventory.FSLStorage@13e344d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Inventory.FSLStorage -->
    </test> <!-- FSL Storage -->
    <test started-at="2022-05-05T11:14:02 IST" name="FSL SetUp" finished-at="2022-05-05T11:15:51 IST" duration-ms="109371">
      <class name="netAgent_Inventory.FSLSetUp">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Inventory.FSLSetUp@1e6a3214]" started-at="2022-05-05T11:14:02 IST" name="testMethodName" finished-at="2022-05-05T11:14:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Inventory.FSLSetUp.fSLSetup() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="fSLSetup()[pri:0, instance:netAgent_Inventory.FSLSetUp@1e6a3214]" started-at="2022-05-05T11:14:02 IST" name="fSLSetup" finished-at="2022-05-05T11:15:51 IST" duration-ms="109259" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fSLSetup -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Inventory.FSLSetUp@1e6a3214]" started-at="2022-05-05T11:15:51 IST" name="getResult" finished-at="2022-05-05T11:15:51 IST" duration-ms="109" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=fSLSetup status=SUCCESS method=FSLSetUp.fSLSetup()[pri:0, instance:netAgent_Inventory.FSLSetUp@1e6a3214] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Inventory.FSLSetUp -->
    </test> <!-- FSL SetUp -->
    <test started-at="2022-05-05T11:15:51 IST" name="Cycle Count Bin" finished-at="2022-05-05T11:16:01 IST" duration-ms="10330">
      <class name="netAgent_Inventory.CycleCountBin">
        <test-method signature="cycleCountBIN()[pri:0, instance:netAgent_Inventory.CycleCountBin@3c77d488]" started-at="2022-05-05T11:15:51 IST" name="cycleCountBIN" finished-at="2022-05-05T11:16:01 IST" duration-ms="10204" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cycleCountBIN -->
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Inventory.CycleCountBin@3c77d488]" started-at="2022-05-05T11:15:51 IST" name="testMethodName" finished-at="2022-05-05T11:15:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Inventory.CycleCountBin.cycleCountBIN() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Inventory.CycleCountBin@3c77d488]" started-at="2022-05-05T11:16:01 IST" name="getResult" finished-at="2022-05-05T11:16:01 IST" duration-ms="121" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=cycleCountBIN status=SUCCESS method=CycleCountBin.cycleCountBIN()[pri:0, instance:netAgent_Inventory.CycleCountBin@3c77d488] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Inventory.CycleCountBin -->
    </test> <!-- Cycle Count Bin -->
    <test started-at="2022-05-05T11:16:01 IST" name="PutAway" finished-at="2022-05-05T11:16:26 IST" duration-ms="24877">
      <class name="netAgent_Inventory.PutAway">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Inventory.PutAway@750e2b97]" started-at="2022-05-05T11:16:01 IST" name="testMethodName" finished-at="2022-05-05T11:16:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void netAgent_Inventory.PutAway.putAway() throws org.apache.poi.EncryptedDocumentException,org.apache.poi.openxml4j.exceptions.InvalidFormatException,java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="putAway()[pri:0, instance:netAgent_Inventory.PutAway@750e2b97]" started-at="2022-05-05T11:16:01 IST" name="putAway" finished-at="2022-05-05T11:16:26 IST" duration-ms="24765" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- putAway -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Inventory.PutAway@750e2b97]" started-at="2022-05-05T11:16:26 IST" name="getResult" finished-at="2022-05-05T11:16:26 IST" duration-ms="110" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=putAway status=SUCCESS method=PutAway.putAway()[pri:0, instance:netAgent_Inventory.PutAway@750e2b97] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Inventory.PutAway -->
    </test> <!-- PutAway -->
    <test started-at="2022-05-05T11:16:26 IST" name="ASN Log" finished-at="2022-05-05T11:17:46 IST" duration-ms="80226">
      <class name="netAgent_Inventory.ASNLog">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Inventory.ASNLog@f0c8a99]" started-at="2022-05-05T11:16:26 IST" name="testMethodName" finished-at="2022-05-05T11:16:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Inventory.ASNLog.aSNLog() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="aSNLog()[pri:0, instance:netAgent_Inventory.ASNLog@f0c8a99]" started-at="2022-05-05T11:16:26 IST" name="aSNLog" finished-at="2022-05-05T11:17:46 IST" duration-ms="80116" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aSNLog -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Inventory.ASNLog@f0c8a99]" started-at="2022-05-05T11:17:46 IST" name="getResult" finished-at="2022-05-05T11:17:46 IST" duration-ms="107" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=aSNLog status=SUCCESS method=ASNLog.aSNLog()[pri:0, instance:netAgent_Inventory.ASNLog@f0c8a99] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Inventory.ASNLog -->
    </test> <!-- ASN Log -->
    <test started-at="2022-05-05T11:17:46 IST" name="Agent Activity" finished-at="2022-05-05T11:19:00 IST" duration-ms="73479">
      <class name="netAgent_Reports.AgentActivity">
        <test-method signature="AgentActivityReport()[pri:0, instance:netAgent_Reports.AgentActivity@6892b3b6]" started-at="2022-05-05T11:17:46 IST" name="AgentActivityReport" finished-at="2022-05-05T11:19:00 IST" duration-ms="73363" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AgentActivityReport -->
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Reports.AgentActivity@6892b3b6]" started-at="2022-05-05T11:17:46 IST" name="testMethodName" finished-at="2022-05-05T11:17:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Reports.AgentActivity.AgentActivityReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Reports.AgentActivity@6892b3b6]" started-at="2022-05-05T11:19:00 IST" name="getResult" finished-at="2022-05-05T11:19:00 IST" duration-ms="113" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AgentActivityReport status=SUCCESS method=AgentActivity.AgentActivityReport()[pri:0, instance:netAgent_Reports.AgentActivity@6892b3b6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Reports.AgentActivity -->
    </test> <!-- Agent Activity -->
    <test started-at="2022-05-05T11:19:00 IST" name="Agent Activity Chart" finished-at="2022-05-05T11:19:28 IST" duration-ms="28509">
      <class name="netAgent_Reports.AgentActivityChart">
        <test-method signature="AgentActivityChartReport()[pri:0, instance:netAgent_Reports.AgentActivityChart@5b1669c0]" started-at="2022-05-05T11:19:00 IST" name="AgentActivityChartReport" finished-at="2022-05-05T11:19:28 IST" duration-ms="28402" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AgentActivityChartReport -->
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Reports.AgentActivityChart@5b1669c0]" started-at="2022-05-05T11:19:00 IST" name="testMethodName" finished-at="2022-05-05T11:19:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Reports.AgentActivityChart.AgentActivityChartReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Reports.AgentActivityChart@5b1669c0]" started-at="2022-05-05T11:19:28 IST" name="getResult" finished-at="2022-05-05T11:19:28 IST" duration-ms="105" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AgentActivityChartReport status=SUCCESS method=AgentActivityChart.AgentActivityChartReport()[pri:0, instance:netAgent_Reports.AgentActivityChart@5b1669c0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Reports.AgentActivityChart -->
    </test> <!-- Agent Activity Chart -->
    <test started-at="2022-05-05T11:19:28 IST" name="Agent Activity Detail" finished-at="2022-05-05T11:19:56 IST" duration-ms="27129">
      <class name="netAgent_Reports.AgentActivityDetail">
        <test-method signature="agentActivityDetailReport()[pri:0, instance:netAgent_Reports.AgentActivityDetail@8f2ef19]" started-at="2022-05-05T11:19:28 IST" name="agentActivityDetailReport" finished-at="2022-05-05T11:19:55 IST" duration-ms="27010" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- agentActivityDetailReport -->
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Reports.AgentActivityDetail@8f2ef19]" started-at="2022-05-05T11:19:28 IST" name="testMethodName" finished-at="2022-05-05T11:19:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Reports.AgentActivityDetail.agentActivityDetailReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Reports.AgentActivityDetail@8f2ef19]" started-at="2022-05-05T11:19:55 IST" name="getResult" finished-at="2022-05-05T11:19:56 IST" duration-ms="117" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=agentActivityDetailReport status=SUCCESS method=AgentActivityDetail.agentActivityDetailReport()[pri:0, instance:netAgent_Reports.AgentActivityDetail@8f2ef19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Reports.AgentActivityDetail -->
    </test> <!-- Agent Activity Detail -->
    <test started-at="2022-05-05T11:19:56 IST" name="Quarantine Report" finished-at="2022-05-05T11:20:20 IST" duration-ms="24758">
      <class name="netAgent_Reports.QuarantineReport">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Reports.QuarantineReport@74ea2410]" started-at="2022-05-05T11:19:56 IST" name="testMethodName" finished-at="2022-05-05T11:19:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Reports.QuarantineReport.quarantineReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="quarantineReport()[pri:0, instance:netAgent_Reports.QuarantineReport@74ea2410]" started-at="2022-05-05T11:19:56 IST" name="quarantineReport" finished-at="2022-05-05T11:20:20 IST" duration-ms="24630" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- quarantineReport -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Reports.QuarantineReport@74ea2410]" started-at="2022-05-05T11:20:20 IST" name="getResult" finished-at="2022-05-05T11:20:20 IST" duration-ms="125" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=quarantineReport status=SUCCESS method=QuarantineReport.quarantineReport()[pri:0, instance:netAgent_Reports.QuarantineReport@74ea2410] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Reports.QuarantineReport -->
    </test> <!-- Quarantine Report -->
    <test started-at="2022-05-05T11:20:20 IST" name="RTE Driver Billing Report" finished-at="2022-05-05T11:20:47 IST" duration-ms="26986">
      <class name="netAgent_Reports.RTEDriverBilling">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Reports.RTEDriverBilling@793f29ff]" started-at="2022-05-05T11:20:20 IST" name="testMethodName" finished-at="2022-05-05T11:20:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Reports.RTEDriverBilling.rteDriverBillingReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="rteDriverBillingReport()[pri:0, instance:netAgent_Reports.RTEDriverBilling@793f29ff]" started-at="2022-05-05T11:20:20 IST" name="rteDriverBillingReport" finished-at="2022-05-05T11:20:47 IST" duration-ms="26861" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- rteDriverBillingReport -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Reports.RTEDriverBilling@793f29ff]" started-at="2022-05-05T11:20:47 IST" name="getResult" finished-at="2022-05-05T11:20:47 IST" duration-ms="124" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=rteDriverBillingReport status=SUCCESS method=RTEDriverBilling.rteDriverBillingReport()[pri:0, instance:netAgent_Reports.RTEDriverBilling@793f29ff] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Reports.RTEDriverBilling -->
    </test> <!-- RTE Driver Billing Report -->
    <test started-at="2022-05-05T11:20:47 IST" name="Inventory OnHand Report" finished-at="2022-05-05T11:21:24 IST" duration-ms="37041">
      <class name="netAgent_Reports.InventoryOnHandReport">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Reports.InventoryOnHandReport@7ef82753]" started-at="2022-05-05T11:20:47 IST" name="testMethodName" finished-at="2022-05-05T11:20:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Reports.InventoryOnHandReport.OnHandReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="OnHandReport()[pri:0, instance:netAgent_Reports.InventoryOnHandReport@7ef82753]" started-at="2022-05-05T11:20:47 IST" name="OnHandReport" finished-at="2022-05-05T11:21:24 IST" duration-ms="36890" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OnHandReport -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Reports.InventoryOnHandReport@7ef82753]" started-at="2022-05-05T11:21:24 IST" name="getResult" finished-at="2022-05-05T11:21:24 IST" duration-ms="149" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OnHandReport status=SUCCESS method=InventoryOnHandReport.OnHandReport()[pri:0, instance:netAgent_Reports.InventoryOnHandReport@7ef82753] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Reports.InventoryOnHandReport -->
    </test> <!-- Inventory OnHand Report -->
    <test started-at="2022-05-05T11:21:24 IST" name="Inventory Pull Report" finished-at="2022-05-05T11:22:02 IST" duration-ms="37384">
      <class name="netAgent_Reports.InventoryPullReport">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Reports.InventoryPullReport@75d3a5e0]" started-at="2022-05-05T11:21:24 IST" name="testMethodName" finished-at="2022-05-05T11:21:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Reports.InventoryPullReport.PullReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="PullReport()[pri:0, instance:netAgent_Reports.InventoryPullReport@75d3a5e0]" started-at="2022-05-05T11:21:24 IST" name="PullReport" finished-at="2022-05-05T11:22:02 IST" duration-ms="37265" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PullReport -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Reports.InventoryPullReport@75d3a5e0]" started-at="2022-05-05T11:22:02 IST" name="getResult" finished-at="2022-05-05T11:22:02 IST" duration-ms="117" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PullReport status=SUCCESS method=InventoryPullReport.PullReport()[pri:0, instance:netAgent_Reports.InventoryPullReport@75d3a5e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Reports.InventoryPullReport -->
    </test> <!-- Inventory Pull Report -->
    <test started-at="2022-05-05T11:22:02 IST" name="Inventory Receipt Report" finished-at="2022-05-05T11:22:40 IST" duration-ms="38387">
      <class name="netAgent_Reports.InventoryReceiptReport">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Reports.InventoryReceiptReport@795509d9]" started-at="2022-05-05T11:22:02 IST" name="testMethodName" finished-at="2022-05-05T11:22:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Reports.InventoryReceiptReport.ReceiptReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="ReceiptReport()[pri:0, instance:netAgent_Reports.InventoryReceiptReport@795509d9]" started-at="2022-05-05T11:22:02 IST" name="ReceiptReport" finished-at="2022-05-05T11:22:40 IST" duration-ms="38251" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ReceiptReport -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Reports.InventoryReceiptReport@795509d9]" started-at="2022-05-05T11:22:40 IST" name="getResult" finished-at="2022-05-05T11:22:40 IST" duration-ms="133" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReceiptReport status=SUCCESS method=InventoryReceiptReport.ReceiptReport()[pri:0, instance:netAgent_Reports.InventoryReceiptReport@795509d9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Reports.InventoryReceiptReport -->
    </test> <!-- Inventory Receipt Report -->
    <test started-at="2022-05-05T11:22:40 IST" name="Inventory Transaction Report" finished-at="2022-05-05T11:23:20 IST" duration-ms="39769">
      <class name="netAgent_Reports.InventoryTransactionReport">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Reports.InventoryTransactionReport@4b013c76]" started-at="2022-05-05T11:22:40 IST" name="testMethodName" finished-at="2022-05-05T11:22:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Reports.InventoryTransactionReport.TransactionReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="TransactionReport()[pri:0, instance:netAgent_Reports.InventoryTransactionReport@4b013c76]" started-at="2022-05-05T11:22:40 IST" name="TransactionReport" finished-at="2022-05-05T11:23:20 IST" duration-ms="39652" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TransactionReport -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Reports.InventoryTransactionReport@4b013c76]" started-at="2022-05-05T11:23:20 IST" name="getResult" finished-at="2022-05-05T11:23:20 IST" duration-ms="113" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TransactionReport status=SUCCESS method=InventoryTransactionReport.TransactionReport()[pri:0, instance:netAgent_Reports.InventoryTransactionReport@4b013c76] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Reports.InventoryTransactionReport -->
    </test> <!-- Inventory Transaction Report -->
    <test started-at="2022-05-05T11:23:20 IST" name="User Profile" finished-at="2022-05-05T11:23:25 IST" duration-ms="5576">
      <class name="netAgent_Admin.UserProfile">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Admin.UserProfile@1c5920df]" started-at="2022-05-05T11:23:20 IST" name="testMethodName" finished-at="2022-05-05T11:23:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Admin.UserProfile.userprofile() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="userprofile()[pri:0, instance:netAgent_Admin.UserProfile@1c5920df]" started-at="2022-05-05T11:23:20 IST" name="userprofile" finished-at="2022-05-05T11:23:25 IST" duration-ms="5430" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userprofile -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Admin.UserProfile@1c5920df]" started-at="2022-05-05T11:23:25 IST" name="getResult" finished-at="2022-05-05T11:23:25 IST" duration-ms="143" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=userprofile status=SUCCESS method=UserProfile.userprofile()[pri:0, instance:netAgent_Admin.UserProfile@1c5920df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Admin.UserProfile -->
    </test> <!-- User Profile -->
    <test started-at="2022-05-05T11:23:25 IST" name="UserList" finished-at="2022-05-05T11:23:50 IST" duration-ms="24457">
      <class name="netAgent_Admin.UserList">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Admin.UserList@1349883]" started-at="2022-05-05T11:23:25 IST" name="testMethodName" finished-at="2022-05-05T11:23:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Admin.UserList.userlist() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="userlist()[pri:0, instance:netAgent_Admin.UserList@1349883]" started-at="2022-05-05T11:23:25 IST" name="userlist" finished-at="2022-05-05T11:23:50 IST" duration-ms="24356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userlist -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Admin.UserList@1349883]" started-at="2022-05-05T11:23:50 IST" name="getResult" finished-at="2022-05-05T11:23:50 IST" duration-ms="100" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=userlist status=SUCCESS method=UserList.userlist()[pri:0, instance:netAgent_Admin.UserList@1349883] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Admin.UserList -->
    </test> <!-- UserList -->
    <test started-at="2022-05-05T11:23:50 IST" name="Agent Console" finished-at="2022-05-05T11:24:26 IST" duration-ms="35630">
      <class name="netAgent_Tools.AgentConsole">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Tools.AgentConsole@2d901eb0]" started-at="2022-05-05T11:23:50 IST" name="testMethodName" finished-at="2022-05-05T11:23:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Tools.AgentConsole.agentConsole() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="agentConsole()[pri:0, instance:netAgent_Tools.AgentConsole@2d901eb0]" started-at="2022-05-05T11:23:50 IST" name="agentConsole" finished-at="2022-05-05T11:24:25 IST" duration-ms="35516" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- agentConsole -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Tools.AgentConsole@2d901eb0]" started-at="2022-05-05T11:24:25 IST" name="getResult" finished-at="2022-05-05T11:24:26 IST" duration-ms="111" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=agentConsole status=SUCCESS method=AgentConsole.agentConsole()[pri:0, instance:netAgent_Tools.AgentConsole@2d901eb0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Tools.AgentConsole -->
    </test> <!-- Agent Console -->
    <test started-at="2022-05-05T11:24:26 IST" name="Mileage Calculation" finished-at="2022-05-05T11:24:37 IST" duration-ms="11750">
      <class name="netAgent_Tools.MileageCalc">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Tools.MileageCalc@909217e]" started-at="2022-05-05T11:24:26 IST" name="testMethodName" finished-at="2022-05-05T11:24:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Tools.MileageCalc.mileageCalc() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="mileageCalc()[pri:0, instance:netAgent_Tools.MileageCalc@909217e]" started-at="2022-05-05T11:24:26 IST" name="mileageCalc" finished-at="2022-05-05T11:24:37 IST" duration-ms="11646" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mileageCalc -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Tools.MileageCalc@909217e]" started-at="2022-05-05T11:24:37 IST" name="getResult" finished-at="2022-05-05T11:24:37 IST" duration-ms="100" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=mileageCalc status=SUCCESS method=MileageCalc.mileageCalc()[pri:0, instance:netAgent_Tools.MileageCalc@909217e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Tools.MileageCalc -->
    </test> <!-- Mileage Calculation -->
    <test started-at="2022-05-05T11:24:37 IST" name="MNXDocuments" finished-at="2022-05-05T11:24:50 IST" duration-ms="12409">
      <class name="netAgent_Tools.MNXDocuments">
        <test-method signature="MNXDoc()[pri:0, instance:netAgent_Tools.MNXDocuments@5e2c3d18]" started-at="2022-05-05T11:24:37 IST" name="MNXDoc" finished-at="2022-05-05T11:24:50 IST" duration-ms="12306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MNXDoc -->
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Tools.MNXDocuments@5e2c3d18]" started-at="2022-05-05T11:24:37 IST" name="testMethodName" finished-at="2022-05-05T11:24:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Tools.MNXDocuments.MNXDoc() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Tools.MNXDocuments@5e2c3d18]" started-at="2022-05-05T11:24:50 IST" name="getResult" finished-at="2022-05-05T11:24:50 IST" duration-ms="101" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MNXDoc status=SUCCESS method=MNXDocuments.MNXDoc()[pri:0, instance:netAgent_Tools.MNXDocuments@5e2c3d18] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Tools.MNXDocuments -->
    </test> <!-- MNXDocuments -->
    <test started-at="2022-05-05T11:24:50 IST" name="User Preferences" finished-at="2022-05-05T11:25:00 IST" duration-ms="10425">
      <class name="netAgent_Preferences.UserPreferences">
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_Preferences.UserPreferences@16eb3ea3]" started-at="2022-05-05T11:24:50 IST" name="testMethodName" finished-at="2022-05-05T11:24:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void netAgent_Preferences.UserPreferences.UserPreference() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="UserPreference()[pri:0, instance:netAgent_Preferences.UserPreferences@16eb3ea3]" started-at="2022-05-05T11:24:50 IST" name="UserPreference" finished-at="2022-05-05T11:25:00 IST" duration-ms="10320" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserPreference -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_Preferences.UserPreferences@16eb3ea3]" started-at="2022-05-05T11:25:00 IST" name="getResult" finished-at="2022-05-05T11:25:00 IST" duration-ms="101" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UserPreference status=SUCCESS method=UserPreferences.UserPreference()[pri:0, instance:netAgent_Preferences.UserPreferences@16eb3ea3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- netAgent_Preferences.UserPreferences -->
    </test> <!-- User Preferences -->
    <test started-at="2022-05-05T11:25:00 IST" name="OrderProcessing " finished-at="2022-05-05T11:27:21 IST" duration-ms="140448">
      <class name="netAgent_OperationsTab.OrderProcessing">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:netAgent_OperationsTab.OrderProcessing@1750fbeb]" started-at="2022-05-05T11:12:52 IST" name="beforeMethod" finished-at="2022-05-05T11:13:16 IST" duration-ms="24038" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="testMethodName(java.lang.reflect.Method)[pri:0, instance:netAgent_OperationsTab.OrderProcessing@1750fbeb]" started-at="2022-05-05T11:25:00 IST" name="testMethodName" finished-at="2022-05-05T11:25:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public static void netAgent_OperationsTab.OrderProcessing.orderProcess() throws org.apache.poi.EncryptedDocumentException,org.apache.poi.openxml4j.exceptions.InvalidFormatException,java.io.IOException,java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethodName -->
        <test-method signature="orderProcess()[pri:0, instance:netAgent_OperationsTab.OrderProcessing@1750fbeb]" started-at="2022-05-05T11:25:00 IST" name="orderProcess" finished-at="2022-05-05T11:27:21 IST" duration-ms="140328" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- orderProcess -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:netAgent_OperationsTab.OrderProcessing@1750fbeb]" started-at="2022-05-05T11:27:21 IST" name="getResult" finished-at="2022-05-05T11:27:21 IST" duration-ms="118" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=orderProcess status=SUCCESS method=OrderProcessing.orderProcess()[pri:0, instance:netAgent_OperationsTab.OrderProcessing@1750fbeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="SendEmail()[pri:0, instance:netAgent_OperationsTab.OrderProcessing@1750fbeb]" started-at="2022-05-05T11:27:21 IST" name="SendEmail" finished-at="2022-05-05T11:27:25 IST" duration-ms="4556" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SendEmail -->
      </class> <!-- netAgent_OperationsTab.OrderProcessing -->
    </test> <!-- OrderProcessing  -->
  </suite> <!-- NetAgentSmokeTest -->
</testng-results>
